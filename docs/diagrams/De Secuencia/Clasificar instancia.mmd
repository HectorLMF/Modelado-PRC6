sequenceDiagram
    participant Usuario
    participant Main
    participant Scanner
    participant Dataset
    participant Instance as Instancia
    participant KNNClassifier
    participant DistanceMetric
    participant CaseWeightingStrategy
    participant ClassificationRule

    Usuario->>Main: choose(4)
    note right of Main: Usuario selecciona la opción de clasificación

    Main->>Scanner: nextLine()
    note right of Scanner: Lee la línea de entrada con valores de la instancia

    Scanner-->>Main: "v1,v2,...,vn"
    note right of Main: Devuelve la cadena introducida

    Main->>Instancia: new Instance()
    note right of Instancia: Crea el objeto donde almacenar valores

    Main->>Dataset: getAttributes()
    note right of Dataset: Obtiene lista de atributos del dataset

    Dataset-->>Main: List<Attribute>
    note right of Main: Main recibe los metadatos de los atributos

    loop Construir instancia
        alt atributo es clase
            Main->>Instancia: addValue("")
            note right of Instancia: Añade placeholder para la clase
        else atributo cuantitativo
            Main->>Instancia: addValue(parseFloat(token))
            note right of Instancia: Convierte token a número y lo añade
        else
            Main->>Instancia: addValue(token)
            note right of Instancia: Añade token como cadena
        end
    end

    Main->>KNNClassifier: classify(Instancia)
    note right of KNNClassifier: Inicia el proceso k-NN

    KNNClassifier->>Dataset: getInstances()
    note right of Dataset: Obtiene todas las instancias de entrenamiento

    Dataset-->>KNNClassifier: List<Instance>
    note right of KNNClassifier: Recibe la lista para comparar

    loop Para cada instancia de entrenamiento
        KNNClassifier->>DistanceMetric: compute(trainInst,Instancia,attrs,weights)
        note right of DistanceMetric: Calcula distancia ponderada
        DistanceMetric-->>KNNClassifier: distancia d
        note right of KNNClassifier: Recibe valor de distancia
        KNNClassifier->>KNNClassifier: neighbors.add(new Neighbor(trainInst,d))
        note right of KNNClassifier: Almacena vecino y distancia
    end

    KNNClassifier->>KNNClassifier: sort(neighbors)
    note right of KNNClassifier: Ordena vecinos por distancia ascendente

    KNNClassifier->>KNNClassifier: limit = min(k,neighbors.size)
    note right of KNNClassifier: Determina cuántos vecinos usar

    loop i = 0..limit-1
        KNNClassifier->>CaseWeightingStrategy: getWeight(i+1,neighbors[i].distance)
        note right of CaseWeightingStrategy: Calcula peso según posición/distancia
        CaseWeightingStrategy-->>KNNClassifier: pesoVote
        note right of KNNClassifier: Recibe peso para este vecino
        KNNClassifier->>KNNClassifier: votes.put(label,+pesoVote)
        note right of KNNClassifier: Acumula votos ponderados
    end

    KNNClassifier->>ClassificationRule: predictClass(votes)
    note right of ClassificationRule: Aplica regla de votación

    ClassificationRule-->>KNNClassifier: clasePredicha
    note right of KNNClassifier: Recibe la clase ganadora

    KNNClassifier-->>Main: clasePredicha
    note right of Main: Devuelve resultado al main

    Main-->>Usuario: println("Clase predicha: "+clasePredicha)
    note right of Usuario: Muestra la clase en consola
